openapi: 3.0.3
info:
  title: Cinema Docker
  version: 1.0.0
servers:
- url: http://localhost:8080 
  description: Servidor local
tags:
#Tabelas da Base de dados Cinema
- name: Pessoa
- name: Filme
- name: Funcao
- name: Filme_Pais
- name: Papel
- name: Bilheteira
- name: Merchandising
- name: Custo_Producao


paths:
  /Pessoa:
  # Obter dados da tabela pessoa
    get:
      tags:
      - Pessoa
      summary: Obter lista de pessoas
      operationId: getPessoa
      responses:
        "200":
          description: Lista de pessoas
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pessoa'
                x-content-type: application/json
        "404":
          description: Nenhuma pessoa encontrada
      x-swagger-router-controller: Pessoa
    # Criar pessoa na tabela 
    post:
      tags:
      - Pessoa
      summary: Criar uma nova pessoa 
      operationId: createPessoa
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pessoa'
        required: true
      responses:
        "201":
          description: Pessoa criada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pessoa'
      x-swagger-router-controller: Pessoa
  /Pessoa/{id}:
   # Atualizar dados da tabela pessoa
    put:
      tags:
      - Pessoa
      summary: Atualizar uma pessoa
      operationId: updatePessoa
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pessoa'
        required: true
      responses:
        "200":
          description: Pessoa atualizada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pessoa'
        "404":
          description: Pessoa não encontrada
      x-swagger-router-controller: Pessoa
    # Apagar  dados da tabela pessoa
    delete:
      tags:
      - Pessoa
      summary: Apagar uma pessoa
      operationId: deletePessoa
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: Pessoa Apagada com sucesso
        "404":
          description: Pessoa não encontrada
      x-swagger-router-controller: Pessoa
  /Filme:
  # Obter dados da tabela Filme
    get:
      tags:
      - Filme
      summary: Obter lista de filmes
      operationId: getFilme
      responses:
        "200":
          description: Lista de filmes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Filme'
                x-content-type: application/json
      x-swagger-router-controller: Filme
     # Criar Filme na tabela
    post:
      tags:
      - Filme
      summary: Criar um novo filme
      operationId: createFilme
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Filme'
        required: true
      responses:
        "201":
          description: Filme criado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Filme'
        x-swagger-router-controller: Filme
  /Funcao:
  # Obter dados da tabela Funçao
    get:
      tags:
      - Funcao
      summary: "Lista todas as Funcoes"
      description: "Retorna uma lista com todas as funções cadastradas."
      operationId: getFuncao
      responses:
        '200':
          description: "Lista de funções"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Funcao'
      x-swagger-router-controller: Funcao
    # Criar Funçao na tabela
    post:
      tags:
      - Funcao
      summary: "Cria uma nova função"
      description: "Cria uma nova função."
      operationId: createFuncao
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Funcao'
      responses:
        '201':
          description: "Função criada com sucesso"
        '400':
          description: "Requisição inválida"
      x-swagger-router-controller: Funcao
  /Funcao/{id}:
  # Atualizar Funçao da tabela pessoa
    put:
      tags:
      - Funcao
      summary: "Atualiza uma função"
      description: "Atualiza os dados de uma função existente."
      operationId: updateFuncao
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: "ID da função"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Funcao'
      x-swagger-router-controller: Funcao
      responses:
        '200':
          description: "Função atualizada com sucesso"
        '400':
          description: "Requisição inválida"
    # Apagar  dados da tabela Funcao
    delete:
      tags:
      - Funcao
      summary: "Apagar uma função"
      description: "Remove uma função."
      operationId: deleteFuncao
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: "ID da função"
      responses:
        '204':
          description: "Função apagada com sucesso"
        '404':
          description: "Função não encontrada"
        x-swagger-router-controller: Funcao
  /Filme/{id}:
   # Atualizar Filme da tabela pessoa
    put:
      tags:
      - Filme
      summary: Atualizar um filme
      operationId: updateFilme
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Filme'
        required: true
      responses:
        "200":
          description: Filme atualizado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Filme'
      x-swagger-router-controller: Filme
    # Apagar  dados da tabela Filme
    delete:
      tags:
      - Filme
      summary: Apagar um filme
      operationId: deleteFilme
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: Filme Apagado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Filme'
        "404":
          description: Filme não encontrado
      x-swagger-router-controller: Filme
  /Filme/{id}/pais:
  # Obter dados da tabela Filme Pais
    get:
      tags:
      - Filme_Pais
      summary: Obter os países associados a um filme
      operationId: getFilmepais
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Lista de países associados ao filme
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Filme_Pais'
                x-content-type: application/json
      x-swagger-router-controller: Filmepais
      # Criar FilmePais na tabela
    post:
      tags:
      - Filme_Pais
      summary: Associar um país a um filme
      operationId: addFilmepais
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Filme_Pais'
        required: true
      responses:
        "201":
          description: País associado com sucesso ao filme
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Filme_Pais'
      x-swagger-router-controller: Filmepais
  /Papel:
  # Obter dados da tabela Filme Papel
    get:
      tags:
      - Papel
      summary: Obter todos os papéis
      operationId: getPapel
      responses:
        "200":
          description: Lista de papéis
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Papel'
                x-content-type: application/json
      x-swagger-router-controller: Papel
      # Criar Papel na tabela
    post:
      tags:
      - Papel
      summary: Criar um papel
      operationId: createPapel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Papel'
        required: true
      responses:
        "201":
          description: Papel criado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Papel'
      x-swagger-router-controller: Papel
  /Bilheteira/{id}:
  # Obter dados da tabela Bilheteira
    get:
      tags:
      - Bilheteira
      summary: Obter dados de bilheteira de um filme
      operationId: getBilheteira
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Dados de bilheteira do filme
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bilheteira'
      x-swagger-router-controller: Bilheteira
    # Criar Bilheteira na tabela
    post:
      tags:
      - Bilheteira
      summary: Criar dados de bilheteira para um filme
      operationId: createBilheteira
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Bilheteira'
        required: true
      responses:
        "201":
          description: Dados de bilheteira criados com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bilheteira'
      x-swagger-router-controller: Bilheteira
  /Merchandising/{id}:
  # Obter dados da tabela Merchandasing
    get:
      tags:
      - Merchandising
      summary: Obter dados de merchandising de um filme
      operationId: getMerchandising
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Dados de merchandising do filme
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Merchandising'
      x-swagger-router-controller: Merchandising
      # Criar Merchandising na tabela
    post:
      tags:
      - Merchandising
      summary: Criar dados de merchandising para um filme
      operationId: createMerchandising
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Merchandising'
        required: true
      responses:
        "201":
          description: Dados de merchandising criados com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Merchandising'
      x-swagger-router-controller: Merchandising
  /CustoProducao/{id}:
  # Obter dados da tabela CustoProduçao
    get:
      tags:
      - Custo_Producao
      summary: Obter dados de custo de produção de um filme
      operationId: getCustoProducao
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Dados de custo de produção do filme
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustoProducao'
      x-swagger-router-controller: CustoProducao
    # Criar CustoProduçao na tabela
    post:
      tags:
      - Custo_Producao
      summary: Criar dados de custo de produção para um filme
      operationId: createCustoProducao
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustoProducao'
        required: true
      responses:
        "201":
          description: Dados de custo de produção criados com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustoProducao'
      x-swagger-router-controller: CustoProducao

components:
  schemas:
    Pessoa:
    #Preenchimento da tabela Pessoas para inserir dados
      required:
      - data_nascimento
      - local_nascimento
      - nome
      - nome_artistico
      type: object
      properties:
        id:
          type: integer
          description: ID da pessoa
        nome:
          type: string
          description: Nome completo da pessoa
        nome_artistico:
          type: string
          description: Nome artístico da pessoa
        data_nascimento:
          type: string
          description: Data de nascimento da pessoa
        local_nascimento:
          type: string
          description: Local de nascimento da pessoa
        data_morte:
          type: string
          description: Data de morte da pessoa (opcional)
        local_morte:
          type: string
          description: Local de morte da pessoa (opcional)
      example:
        local_morte: local_morte
        nome_artistico: nome_artistico
        data_nascimento: data_nascimento
        nome: nome
        id: id
        local_nascimento: local_nascimento
        data_morte: data_morte
    #Preenchimento da tabela Filme para inserir dados
    Filme:
      required:
      - ano
      - genero
      - nome
      - pais
      - realizador_id
      type: object
      properties:
        filme_id:
          type: integer
          description: ID do filme
        nome:
          type: string
          description: Nome do filme
        realizador_id:
          type: integer
          description: ID do realizador (diretor do filme)
        genero:
          type: string
          description: Gênero do filme
        ano:
          type: string
          description: Ano de lançamento do filme
        pais:
          type: string
          description: País de origem do filme
      example:
        realizador_id: realizador_id
        ano: ano
        genero: genero
        filme_id: filme_id
        nome: nome
        pais: pais
      #Preenchimento da tabela Funcao para inserir dados
    Funcao:
      required:
      - funcao_id
      - nome
      type: object
      properties:
        funcao_id:
          type: integer
          description: "ID da função (diretor, ator, etc.)"
        nome:
          type: string
          description: Nome da funçao
      example:
        funcao_id: funcao_id
        nome: nome
    Filme_Pais:
    #Preenchimento da tabela Filme Pais para inserir dados
      required:
      - filme_id
      - pais
      type: object
      properties:
        filme_id:
          type: integer
          format: int64
          description: ID do filme
        pais:
          type: string
          description: País associado ao filme
      example:
        filme_id: filme_id
        pais: pais
      #Preenchimento da tabela Papel para inserir dados
    Papel:
      required:
      - filme_id
      - funcao_id
      - pessoa_id
      type: object
      properties:
        funcao_id:
          type: integer
          description: "ID da função (diretor, ator, etc.)"
        pessoa_id:
          type: integer
          description: ID da pessoa que exerce a função
        filme_id:
          type: integer
          description: ID do filme onde a função é exercida
      example:
        pessoa_id: pessoa_id
        filme_id: filme_id
        funcao_id: funcao_id
    Bilheteira:
      required:
      - filme_id
      - pais_exibicao
      - receita_bilheteira
      type: object
      properties:
        filme_id:
          type: integer
          description: ID do filme
        pais_exibicao:
          type: string
          description: País onde o filme é exibido
        receita_bilheteira:
          type: integer
          description: Receita de bilheteira do filme
      example:
        pais_exibicao: pais_exibicao
        receita_bilheteira: receita_bilheteira
        filme_id: filme_id
    Merchandising:
    #Preenchimento da tabela Merchandising para inserir dados
      required:
      - filme_id
      - merchandising
      type: object
      properties:
        filme_id:
          type: integer
          description: ID do filme
        merchandising:
          type: integer
          description: Valor de merchandising associado ao filme
      example:
        filme_id: filme_id
        merchandising: merchandising
    CustoProducao:
    #Preenchimento da tabela Custos para inserir dados
      required:
      - custo_producao
      - filme_id
      type: object
      properties:
        filme_id:
          type: integer
          description: ID do filme
        custo_producao:
          type: integer
          description: Custo de produção do filme
      example:
        custo_producao: custo_producao
        filme_id: filme_id
